jobs:
- job: 'TestLinux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python38-Linux:
        python.version: '3.8'
    maxParallel: 3
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y inkscape
    displayName: 'Install Inkscape'
  - script: sudo apt-get install -y pandoc
    displayName: 'Install Pandoc'
  # - script: sudo apt-get install -y texlive texlive-latex-extra texlive-xetex dvipng
  #   displayName: 'Install Latex'
  - script: sudo apt-get install -y libomp-8-dev
    displayName: 'Install omp'
  - script: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 10
          ls /usr/bin/llvm*
          export LLVM_CONFIG=/usr/bin/llvm-config-10
    displayName: 'Install llvmlite'
  - script: sudo apt-get install -y p7zip-full
    displayName: 'Install 7z, rar'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install numpy
    displayName: 'Install numpy'
  - script: |
          export LLVM_CONFIG=/usr/bin/llvm-config-10
          pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install onnxruntime
    displayName: 'Install onnxruntime'
  - script: python -u setup.py build_ext --inplace
    displayName: 'Build package inplace'
  - script: python -u setup.py unittests -g ".*((LONG)|(SKIP)|(notebooks)).*"
    displayName: 'Runs Unit Tests'
  - script: |
      python -m pip install cibuildwheel
      export CIBW_BEFORE_BUILD=pip install .
      export CIBW_BEFORE_BUILD=pip install pybind11 cython numpy scipy pyquickhelper scikit-learn pandas pandas_streaming onnx
      export CIBW_BUILD="cp37-manylinux_x86_64 cp38-manylinux_x86_64 cp39-manylinux_x86_64"
      python -m cibuildwheel --output-dir dist/wheelhouse --platform linux
    displayName: 'Build Package many'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-$(python.version)'
      targetPath: 'dist'

- job: 'TestMac'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python39-MacOs:
        python.version: '3.9'
    maxParallel: 3
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: gcc --version
    displayName: 'gcc version'
  - script: brew update
    displayName: 'brew update'
  - script: export
    displayName: 'export'
  - script: gcc --version
    displayName: 'gcc version'
  - script: brew install libomp
    displayName: 'Install omp'
  - script: brew upgrade p7zip
    continueOnError: true
    displayName: 'Install p7zip'
  - script: brew install pandoc
    displayName: 'Install Pandoc'
  - script: brew install graphviz
    continueOnError: true
    displayName: 'Install Graphviz'
  - script: brew install cairo pango gdk-pixbuf libffi
    displayName: 'Install cairo pango gdk-pixbuf libffi'
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH.
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
  #- script: brew install --cask mactex
  #  continueOnError: true
  #  displayName: 'Install latex'
  - bash: conda install -y -c conda-forge numpy scipy
    displayName: Install numpy scipy
  - bash: conda install -y -c conda-forge llvmlite numba pybind11
    displayName: Install llvmlite numba pybind11
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  #- script: pip install -i https://test.pypi.org/simple/ ort-nightly
  #  displayName: 'Install ort-nightly'
  - script: pip install onnxruntime>=1.6.0
    displayName: 'Install onnxruntime'
  - script: |
         # export MACOSX_DEPLOYMENT_TARGET=10.13
         python setup.py build_ext --inplace
    displayName: 'Build package inplace'
  - script: python -u setup.py unittests -g ".*((LONG)|(SKIP)|(notebooks)).*"
    displayName: 'Runs Unit Tests'
  - script: |
      python -m pip install cibuildwheel
      export CIBW_BEFORE_BUILD="pip install ."
      export CIBW_BEFORE_BUILD="pip install pybind11 cython numpy scipy pyquickhelper scikit-learn pandas pandas_streaming onnx"
      export CIBW_BUILD="cp37-macosx_x86_64 cp38-macosx_x86_64"
      # cp39-macosx_x86_64 fails due to missing dependencies
      python -m cibuildwheel --output-dir dist/wheelhouse
    displayName: 'Build Package many'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-mac-$(python.version)'
      targetPath: 'dist'

- job: 'TestWindows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python38-Windows:
        python.version: '3.8'
    maxParallel: 3
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install onnxruntime
    displayName: 'Install onnxruntime'
  - script: python -c "import platform;print(platform.version())"
    displayName: 'Platform'
  - script: python -u setup.py build_ext --inplace
    displayName: 'Build inplace'
  - script: python -u setup.py unittests -d 2
    displayName: 'Runs Unit Tests'
  - script: |
      python -m pip install cibuildwheel
      set CIBW_BEFORE_BUILD=pip install .
      set CIBW_BEFORE_BUILD=pip install pybind11 cython numpy scipy pyquickhelper scikit-learn pandas pandas_streaming onnx
      set CIBW_BUILD=cp37-win_amd64 cp38-win_amd64
      # cp39-win_amd64 fails, onnx is missing
      python -m cibuildwheel --output-dir dist/wheelhouse
    displayName: 'Build Package many'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-windows-$(python.version)'
      targetPath: 'dist'
