import numpy
from onnx import TensorProto
from onnx.helper import make_tensor

{% for domain, name, fct in functions: %}

def {{ python_make_node_name(fct['proto'].domain, 1, fct['proto'].name) }}({{ ", ".join(fct['proto'].input) }}):
    {% if fct['proto'].doc_string %}"""
    {{ fct['proto'].doc_string }}
    """{% endif %}
    {% for node in fct['nodes']: -%}
    {{ ', '.join(node['outputs']) }} = {{ python_make_node_name(node['domain'], opsets[node['domain']], node['op_type'], node=True) }}({{ ', '.join(node['inputs']) }}{% if len(node['inputs']) > 0 and len(node['attributes']) > 0 %},{% endif %}
    {%- for name, value in node['attributes']: -%}
    {{ name }}={{ value }},
    {%- endfor -%})
    {% endfor -%}
    return {{ ", ".join(fct['proto'].output) }}

{% endfor %}

def {{ function_name }}({{ inputs[0][0] }}{% for name in inputs[1:]: %}, {{ name[0] }}{% endfor %}):
    {% if doc_string %}"""
    {{ doc_string }}
    """{% endif %}
    {%- for name, value in initializers: %}{% if len(value.shape) == 0: %}
    {{ name }} = numpy.array({{ value }}, dtype=numpy.{{ value.dtype }})
    {%- else %}{% if value.size < 6: %}
    {{ name }} = numpy.array({{ value.tolist() }}, dtype=numpy.{{ value.dtype }}){% if len(value.shape) > 1: %}.reshape({{ value.shape }}){% endif %})
    {%- else %}
    list_value = {{ value.ravel().tolist() }}
    {{ name }} = numpy.array(list_value, dtype=numpy.{{ value.dtype }}){% if len(value.shape) > 1: %}.reshape({{ value.shape }}){% endif %})
    {% endif %}{% endif %}{% endfor %}

    {% for node in nodes: -%}
    {{ ', '.join(node['outputs']) }} = {{ python_make_node_name(node['domain'], opsets[node['domain']], node['op_type'], node=True) }}({{ ', '.join(node['inputs']) }}{% if len(node['inputs']) > 0 and len(node['attributes']) > 0 %},{% endif %}
        {%- for name, value in node['attributes']: -%}
        {{ name }}={{ value }},
        {%- endfor -%})
    {% endfor -%}
    return {{ outputs[0][0] }}{% for name in outputs[1:]: %}, {{ name[0] }}{% endfor %}
